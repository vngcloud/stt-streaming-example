// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.27.3
// source: proto/stt.proto

package stt

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StreamingSpeechToTextConfig_AudioEncoding int32

const (
	StreamingSpeechToTextConfig_WAV StreamingSpeechToTextConfig_AudioEncoding = 0
	StreamingSpeechToTextConfig_AAC StreamingSpeechToTextConfig_AudioEncoding = 1
)

// Enum value maps for StreamingSpeechToTextConfig_AudioEncoding.
var (
	StreamingSpeechToTextConfig_AudioEncoding_name = map[int32]string{
		0: "WAV",
		1: "AAC",
	}
	StreamingSpeechToTextConfig_AudioEncoding_value = map[string]int32{
		"WAV": 0,
		"AAC": 1,
	}
)

func (x StreamingSpeechToTextConfig_AudioEncoding) Enum() *StreamingSpeechToTextConfig_AudioEncoding {
	p := new(StreamingSpeechToTextConfig_AudioEncoding)
	*p = x
	return p
}

func (x StreamingSpeechToTextConfig_AudioEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamingSpeechToTextConfig_AudioEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stt_proto_enumTypes[0].Descriptor()
}

func (StreamingSpeechToTextConfig_AudioEncoding) Type() protoreflect.EnumType {
	return &file_proto_stt_proto_enumTypes[0]
}

func (x StreamingSpeechToTextConfig_AudioEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamingSpeechToTextConfig_AudioEncoding.Descriptor instead.
func (StreamingSpeechToTextConfig_AudioEncoding) EnumDescriptor() ([]byte, []int) {
	return file_proto_stt_proto_rawDescGZIP(), []int{1, 0}
}

type StreamingSpeechToTextData_ChunkType int32

const (
	StreamingSpeechToTextData_FIRST  StreamingSpeechToTextData_ChunkType = 0
	StreamingSpeechToTextData_MIDDLE StreamingSpeechToTextData_ChunkType = 1
	StreamingSpeechToTextData_LAST   StreamingSpeechToTextData_ChunkType = 2
)

// Enum value maps for StreamingSpeechToTextData_ChunkType.
var (
	StreamingSpeechToTextData_ChunkType_name = map[int32]string{
		0: "FIRST",
		1: "MIDDLE",
		2: "LAST",
	}
	StreamingSpeechToTextData_ChunkType_value = map[string]int32{
		"FIRST":  0,
		"MIDDLE": 1,
		"LAST":   2,
	}
)

func (x StreamingSpeechToTextData_ChunkType) Enum() *StreamingSpeechToTextData_ChunkType {
	p := new(StreamingSpeechToTextData_ChunkType)
	*p = x
	return p
}

func (x StreamingSpeechToTextData_ChunkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamingSpeechToTextData_ChunkType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stt_proto_enumTypes[1].Descriptor()
}

func (StreamingSpeechToTextData_ChunkType) Type() protoreflect.EnumType {
	return &file_proto_stt_proto_enumTypes[1]
}

func (x StreamingSpeechToTextData_ChunkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamingSpeechToTextData_ChunkType.Descriptor instead.
func (StreamingSpeechToTextData_ChunkType) EnumDescriptor() ([]byte, []int) {
	return file_proto_stt_proto_rawDescGZIP(), []int{2, 0}
}

type StreamingSpeechToTextRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*StreamingSpeechToTextRequest_Config
	//	*StreamingSpeechToTextRequest_Data
	Request isStreamingSpeechToTextRequest_Request `protobuf_oneof:"request"`
}

func (x *StreamingSpeechToTextRequest) Reset() {
	*x = StreamingSpeechToTextRequest{}
	mi := &file_proto_stt_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingSpeechToTextRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSpeechToTextRequest) ProtoMessage() {}

func (x *StreamingSpeechToTextRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stt_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSpeechToTextRequest.ProtoReflect.Descriptor instead.
func (*StreamingSpeechToTextRequest) Descriptor() ([]byte, []int) {
	return file_proto_stt_proto_rawDescGZIP(), []int{0}
}

func (m *StreamingSpeechToTextRequest) GetRequest() isStreamingSpeechToTextRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *StreamingSpeechToTextRequest) GetConfig() *StreamingSpeechToTextConfig {
	if x, ok := x.GetRequest().(*StreamingSpeechToTextRequest_Config); ok {
		return x.Config
	}
	return nil
}

func (x *StreamingSpeechToTextRequest) GetData() *StreamingSpeechToTextData {
	if x, ok := x.GetRequest().(*StreamingSpeechToTextRequest_Data); ok {
		return x.Data
	}
	return nil
}

type isStreamingSpeechToTextRequest_Request interface {
	isStreamingSpeechToTextRequest_Request()
}

type StreamingSpeechToTextRequest_Config struct {
	Config *StreamingSpeechToTextConfig `protobuf:"bytes,1,opt,name=config,proto3,oneof"`
}

type StreamingSpeechToTextRequest_Data struct {
	Data *StreamingSpeechToTextData `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*StreamingSpeechToTextRequest_Config) isStreamingSpeechToTextRequest_Request() {}

func (*StreamingSpeechToTextRequest_Data) isStreamingSpeechToTextRequest_Request() {}

type StreamingSpeechToTextConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AudioEncoding     StreamingSpeechToTextConfig_AudioEncoding `protobuf:"varint,1,opt,name=audio_encoding,json=audioEncoding,proto3,enum=speechtotext.StreamingSpeechToTextConfig_AudioEncoding" json:"audio_encoding,omitempty"`
	SampleRateHertz   int32                                     `protobuf:"varint,2,opt,name=sample_rate_hertz,json=sampleRateHertz,proto3" json:"sample_rate_hertz,omitempty"`       // 16000
	AudioChannelCount int32                                     `protobuf:"varint,3,opt,name=audio_channel_count,json=audioChannelCount,proto3" json:"audio_channel_count,omitempty"` // 1
	BytesPerSample    int32                                     `protobuf:"varint,4,opt,name=bytes_per_sample,json=bytesPerSample,proto3" json:"bytes_per_sample,omitempty"`          // 2
}

func (x *StreamingSpeechToTextConfig) Reset() {
	*x = StreamingSpeechToTextConfig{}
	mi := &file_proto_stt_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingSpeechToTextConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSpeechToTextConfig) ProtoMessage() {}

func (x *StreamingSpeechToTextConfig) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stt_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSpeechToTextConfig.ProtoReflect.Descriptor instead.
func (*StreamingSpeechToTextConfig) Descriptor() ([]byte, []int) {
	return file_proto_stt_proto_rawDescGZIP(), []int{1}
}

func (x *StreamingSpeechToTextConfig) GetAudioEncoding() StreamingSpeechToTextConfig_AudioEncoding {
	if x != nil {
		return x.AudioEncoding
	}
	return StreamingSpeechToTextConfig_WAV
}

func (x *StreamingSpeechToTextConfig) GetSampleRateHertz() int32 {
	if x != nil {
		return x.SampleRateHertz
	}
	return 0
}

func (x *StreamingSpeechToTextConfig) GetAudioChannelCount() int32 {
	if x != nil {
		return x.AudioChannelCount
	}
	return 0
}

func (x *StreamingSpeechToTextConfig) GetBytesPerSample() int32 {
	if x != nil {
		return x.BytesPerSample
	}
	return 0
}

type StreamingSpeechToTextData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      []byte                              `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	ChunkType StreamingSpeechToTextData_ChunkType `protobuf:"varint,2,opt,name=chunk_type,json=chunkType,proto3,enum=speechtotext.StreamingSpeechToTextData_ChunkType" json:"chunk_type,omitempty"`
}

func (x *StreamingSpeechToTextData) Reset() {
	*x = StreamingSpeechToTextData{}
	mi := &file_proto_stt_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingSpeechToTextData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSpeechToTextData) ProtoMessage() {}

func (x *StreamingSpeechToTextData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stt_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSpeechToTextData.ProtoReflect.Descriptor instead.
func (*StreamingSpeechToTextData) Descriptor() ([]byte, []int) {
	return file_proto_stt_proto_rawDescGZIP(), []int{2}
}

func (x *StreamingSpeechToTextData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *StreamingSpeechToTextData) GetChunkType() StreamingSpeechToTextData_ChunkType {
	if x != nil {
		return x.ChunkType
	}
	return StreamingSpeechToTextData_FIRST
}

type StreamingSpeechToTextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              string                       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status          int32                        `protobuf:"varint,2,opt,name=status,proto3" json:"status,omitempty"`
	Result          *StreamingSpeechToTextResult `protobuf:"bytes,3,opt,name=result,proto3" json:"result,omitempty"`
	TotalBilledTime int64                        `protobuf:"varint,4,opt,name=total_billed_time,json=totalBilledTime,proto3" json:"total_billed_time,omitempty"`
	Msg             string                       `protobuf:"bytes,5,opt,name=msg,proto3" json:"msg,omitempty"`
	TimeStart       int64                        `protobuf:"varint,6,opt,name=time_start,json=timeStart,proto3" json:"time_start,omitempty"`
}

func (x *StreamingSpeechToTextResponse) Reset() {
	*x = StreamingSpeechToTextResponse{}
	mi := &file_proto_stt_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingSpeechToTextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSpeechToTextResponse) ProtoMessage() {}

func (x *StreamingSpeechToTextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stt_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSpeechToTextResponse.ProtoReflect.Descriptor instead.
func (*StreamingSpeechToTextResponse) Descriptor() ([]byte, []int) {
	return file_proto_stt_proto_rawDescGZIP(), []int{3}
}

func (x *StreamingSpeechToTextResponse) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *StreamingSpeechToTextResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *StreamingSpeechToTextResponse) GetResult() *StreamingSpeechToTextResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *StreamingSpeechToTextResponse) GetTotalBilledTime() int64 {
	if x != nil {
		return x.TotalBilledTime
	}
	return 0
}

func (x *StreamingSpeechToTextResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *StreamingSpeechToTextResponse) GetTimeStart() int64 {
	if x != nil {
		return x.TimeStart
	}
	return 0
}

type StreamingSpeechToTextResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hypotheses  []*StreamingSpeechToTextHypothesis `protobuf:"bytes,1,rep,name=hypotheses,proto3" json:"hypotheses,omitempty"`
	Final       bool                               `protobuf:"varint,2,opt,name=final,proto3" json:"final,omitempty"`
	CloseStream bool                               `protobuf:"varint,3,opt,name=close_stream,json=closeStream,proto3" json:"close_stream,omitempty"`
	TokenLength int32                              `protobuf:"varint,5,opt,name=token_length,json=tokenLength,proto3" json:"token_length,omitempty"`
}

func (x *StreamingSpeechToTextResult) Reset() {
	*x = StreamingSpeechToTextResult{}
	mi := &file_proto_stt_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingSpeechToTextResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSpeechToTextResult) ProtoMessage() {}

func (x *StreamingSpeechToTextResult) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stt_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSpeechToTextResult.ProtoReflect.Descriptor instead.
func (*StreamingSpeechToTextResult) Descriptor() ([]byte, []int) {
	return file_proto_stt_proto_rawDescGZIP(), []int{4}
}

func (x *StreamingSpeechToTextResult) GetHypotheses() []*StreamingSpeechToTextHypothesis {
	if x != nil {
		return x.Hypotheses
	}
	return nil
}

func (x *StreamingSpeechToTextResult) GetFinal() bool {
	if x != nil {
		return x.Final
	}
	return false
}

func (x *StreamingSpeechToTextResult) GetCloseStream() bool {
	if x != nil {
		return x.CloseStream
	}
	return false
}

func (x *StreamingSpeechToTextResult) GetTokenLength() int32 {
	if x != nil {
		return x.TokenLength
	}
	return 0
}

type StreamingSpeechToTextHypothesis struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transcript                 string  `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
	TranscriptNormed           string  `protobuf:"bytes,2,opt,name=transcript_normed,json=transcriptNormed,proto3" json:"transcript_normed,omitempty"`
	TranscriptUrlencoded       string  `protobuf:"bytes,3,opt,name=transcript_urlencoded,json=transcriptUrlencoded,proto3" json:"transcript_urlencoded,omitempty"`
	TranscriptNormedUrlencoded string  `protobuf:"bytes,4,opt,name=transcript_normed_urlencoded,json=transcriptNormedUrlencoded,proto3" json:"transcript_normed_urlencoded,omitempty"`
	Confidence                 float32 `protobuf:"fixed32,5,opt,name=confidence,proto3" json:"confidence,omitempty"`
	Likelihood                 float32 `protobuf:"fixed32,6,opt,name=likelihood,proto3" json:"likelihood,omitempty"`
}

func (x *StreamingSpeechToTextHypothesis) Reset() {
	*x = StreamingSpeechToTextHypothesis{}
	mi := &file_proto_stt_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamingSpeechToTextHypothesis) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamingSpeechToTextHypothesis) ProtoMessage() {}

func (x *StreamingSpeechToTextHypothesis) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stt_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamingSpeechToTextHypothesis.ProtoReflect.Descriptor instead.
func (*StreamingSpeechToTextHypothesis) Descriptor() ([]byte, []int) {
	return file_proto_stt_proto_rawDescGZIP(), []int{5}
}

func (x *StreamingSpeechToTextHypothesis) GetTranscript() string {
	if x != nil {
		return x.Transcript
	}
	return ""
}

func (x *StreamingSpeechToTextHypothesis) GetTranscriptNormed() string {
	if x != nil {
		return x.TranscriptNormed
	}
	return ""
}

func (x *StreamingSpeechToTextHypothesis) GetTranscriptUrlencoded() string {
	if x != nil {
		return x.TranscriptUrlencoded
	}
	return ""
}

func (x *StreamingSpeechToTextHypothesis) GetTranscriptNormedUrlencoded() string {
	if x != nil {
		return x.TranscriptNormedUrlencoded
	}
	return ""
}

func (x *StreamingSpeechToTextHypothesis) GetConfidence() float32 {
	if x != nil {
		return x.Confidence
	}
	return 0
}

func (x *StreamingSpeechToTextHypothesis) GetLikelihood() float32 {
	if x != nil {
		return x.Likelihood
	}
	return 0
}

var File_proto_stt_proto protoreflect.FileDescriptor

var file_proto_stt_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x22,
	0xad, 0x01, 0x0a, 0x1c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x43, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54,
	0x6f, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x06, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x3d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65,
	0x78, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0xa6, 0x02, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12,
	0x5e, 0x0a, 0x0e, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67,
	0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x2a, 0x0a, 0x11, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x68,
	0x65, 0x72, 0x74, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x48, 0x65, 0x72, 0x74, 0x7a, 0x12, 0x2e, 0x0a, 0x13, 0x61,
	0x75, 0x64, 0x69, 0x6f, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x61, 0x75, 0x64, 0x69, 0x6f, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x50, 0x65, 0x72, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x22, 0x21, 0x0a, 0x0d, 0x41, 0x75, 0x64, 0x69, 0x6f, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x07, 0x0a, 0x03, 0x57, 0x41, 0x56, 0x10, 0x00, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x41, 0x43, 0x10, 0x01, 0x22, 0xaf, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65,
	0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x50, 0x0a, 0x0a, 0x63, 0x68,
	0x75, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31,
	0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54,
	0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x63, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2c, 0x0a, 0x09,
	0x43, 0x68, 0x75, 0x6e, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x52,
	0x53, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x49, 0x44, 0x44, 0x4c, 0x45, 0x10, 0x01,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x41, 0x53, 0x54, 0x10, 0x02, 0x22, 0xe7, 0x01, 0x0a, 0x1d, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f,
	0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74,
	0x65, 0x78, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x62, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x69, 0x6c, 0x6c, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x1b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69,
	0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x4d, 0x0a, 0x0a, 0x68, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65, 0x73,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63,
	0x68, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x48, 0x79, 0x70,
	0x6f, 0x74, 0x68, 0x65, 0x73, 0x69, 0x73, 0x52, 0x0a, 0x68, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65,
	0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x21, 0x0a, 0x0c,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x22,
	0xa5, 0x02, 0x0a, 0x1f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65,
	0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x48, 0x79, 0x70, 0x6f, 0x74, 0x68, 0x65,
	0x73, 0x69, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x12, 0x33, 0x0a, 0x15, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x14, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x55, 0x72, 0x6c, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x6e, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1a, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4e, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x55, 0x72, 0x6c,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x64, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6b, 0x65, 0x6c,
	0x69, 0x68, 0x6f, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6c, 0x69, 0x6b,
	0x65, 0x6c, 0x69, 0x68, 0x6f, 0x6f, 0x64, 0x32, 0x86, 0x01, 0x0a, 0x0c, 0x53, 0x70, 0x65, 0x65,
	0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x12, 0x76, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65, 0x78,
	0x74, 0x12, 0x2a, 0x2e, 0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74,
	0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68,
	0x54, 0x6f, 0x54, 0x65, 0x78, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2b, 0x2e,
	0x73, 0x70, 0x65, 0x65, 0x63, 0x68, 0x74, 0x6f, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x69, 0x6e, 0x67, 0x53, 0x70, 0x65, 0x65, 0x63, 0x68, 0x54, 0x6f, 0x54, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01,
	0x42, 0x1b, 0x5a, 0x19, 0x73, 0x74, 0x74, 0x2d, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x69, 0x6e,
	0x67, 0x2d, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x73, 0x74, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_stt_proto_rawDescOnce sync.Once
	file_proto_stt_proto_rawDescData = file_proto_stt_proto_rawDesc
)

func file_proto_stt_proto_rawDescGZIP() []byte {
	file_proto_stt_proto_rawDescOnce.Do(func() {
		file_proto_stt_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_stt_proto_rawDescData)
	})
	return file_proto_stt_proto_rawDescData
}

var file_proto_stt_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_stt_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_stt_proto_goTypes = []any{
	(StreamingSpeechToTextConfig_AudioEncoding)(0), // 0: speechtotext.StreamingSpeechToTextConfig.AudioEncoding
	(StreamingSpeechToTextData_ChunkType)(0),       // 1: speechtotext.StreamingSpeechToTextData.ChunkType
	(*StreamingSpeechToTextRequest)(nil),           // 2: speechtotext.StreamingSpeechToTextRequest
	(*StreamingSpeechToTextConfig)(nil),            // 3: speechtotext.StreamingSpeechToTextConfig
	(*StreamingSpeechToTextData)(nil),              // 4: speechtotext.StreamingSpeechToTextData
	(*StreamingSpeechToTextResponse)(nil),          // 5: speechtotext.StreamingSpeechToTextResponse
	(*StreamingSpeechToTextResult)(nil),            // 6: speechtotext.StreamingSpeechToTextResult
	(*StreamingSpeechToTextHypothesis)(nil),        // 7: speechtotext.StreamingSpeechToTextHypothesis
}
var file_proto_stt_proto_depIdxs = []int32{
	3, // 0: speechtotext.StreamingSpeechToTextRequest.config:type_name -> speechtotext.StreamingSpeechToTextConfig
	4, // 1: speechtotext.StreamingSpeechToTextRequest.data:type_name -> speechtotext.StreamingSpeechToTextData
	0, // 2: speechtotext.StreamingSpeechToTextConfig.audio_encoding:type_name -> speechtotext.StreamingSpeechToTextConfig.AudioEncoding
	1, // 3: speechtotext.StreamingSpeechToTextData.chunk_type:type_name -> speechtotext.StreamingSpeechToTextData.ChunkType
	6, // 4: speechtotext.StreamingSpeechToTextResponse.result:type_name -> speechtotext.StreamingSpeechToTextResult
	7, // 5: speechtotext.StreamingSpeechToTextResult.hypotheses:type_name -> speechtotext.StreamingSpeechToTextHypothesis
	2, // 6: speechtotext.SpeechToText.StreamingSpeechToText:input_type -> speechtotext.StreamingSpeechToTextRequest
	5, // 7: speechtotext.SpeechToText.StreamingSpeechToText:output_type -> speechtotext.StreamingSpeechToTextResponse
	7, // [7:8] is the sub-list for method output_type
	6, // [6:7] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_proto_stt_proto_init() }
func file_proto_stt_proto_init() {
	if File_proto_stt_proto != nil {
		return
	}
	file_proto_stt_proto_msgTypes[0].OneofWrappers = []any{
		(*StreamingSpeechToTextRequest_Config)(nil),
		(*StreamingSpeechToTextRequest_Data)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_stt_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_stt_proto_goTypes,
		DependencyIndexes: file_proto_stt_proto_depIdxs,
		EnumInfos:         file_proto_stt_proto_enumTypes,
		MessageInfos:      file_proto_stt_proto_msgTypes,
	}.Build()
	File_proto_stt_proto = out.File
	file_proto_stt_proto_rawDesc = nil
	file_proto_stt_proto_goTypes = nil
	file_proto_stt_proto_depIdxs = nil
}
