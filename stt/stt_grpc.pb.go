// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.27.3
// source: stt.proto

package stt

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpeechToTextClient is the client API for SpeechToText service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeechToTextClient interface {
	StreamingSpeechToText(ctx context.Context, opts ...grpc.CallOption) (SpeechToText_StreamingSpeechToTextClient, error)
}

type speechToTextClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeechToTextClient(cc grpc.ClientConnInterface) SpeechToTextClient {
	return &speechToTextClient{cc}
}

func (c *speechToTextClient) StreamingSpeechToText(ctx context.Context, opts ...grpc.CallOption) (SpeechToText_StreamingSpeechToTextClient, error) {
	stream, err := c.cc.NewStream(ctx, &SpeechToText_ServiceDesc.Streams[0], "/speech-api/speechtotext.SpeechToText/StreamingSpeechToText", opts...)
	if err != nil {
		return nil, err
	}
	x := &speechToTextStreamingSpeechToTextClient{stream}
	return x, nil
}

type SpeechToText_StreamingSpeechToTextClient interface {
	Send(*StreamingSpeechToTextRequest) error
	Recv() (*StreamingSpeechToTextResponse, error)
	grpc.ClientStream
}

type speechToTextStreamingSpeechToTextClient struct {
	grpc.ClientStream
}

func (x *speechToTextStreamingSpeechToTextClient) Send(m *StreamingSpeechToTextRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *speechToTextStreamingSpeechToTextClient) Recv() (*StreamingSpeechToTextResponse, error) {
	m := new(StreamingSpeechToTextResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpeechToTextServer is the server API for SpeechToText service.
// All implementations must embed UnimplementedSpeechToTextServer
// for forward compatibility
type SpeechToTextServer interface {
	StreamingSpeechToText(SpeechToText_StreamingSpeechToTextServer) error
	mustEmbedUnimplementedSpeechToTextServer()
}

// UnimplementedSpeechToTextServer must be embedded to have forward compatible implementations.
type UnimplementedSpeechToTextServer struct {
}

func (UnimplementedSpeechToTextServer) StreamingSpeechToText(SpeechToText_StreamingSpeechToTextServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamingSpeechToText not implemented")
}
func (UnimplementedSpeechToTextServer) mustEmbedUnimplementedSpeechToTextServer() {}

// UnsafeSpeechToTextServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeechToTextServer will
// result in compilation errors.
type UnsafeSpeechToTextServer interface {
	mustEmbedUnimplementedSpeechToTextServer()
}

func RegisterSpeechToTextServer(s grpc.ServiceRegistrar, srv SpeechToTextServer) {
	s.RegisterService(&SpeechToText_ServiceDesc, srv)
}

func _SpeechToText_StreamingSpeechToText_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SpeechToTextServer).StreamingSpeechToText(&speechToTextStreamingSpeechToTextServer{stream})
}

type SpeechToText_StreamingSpeechToTextServer interface {
	Send(*StreamingSpeechToTextResponse) error
	Recv() (*StreamingSpeechToTextRequest, error)
	grpc.ServerStream
}

type speechToTextStreamingSpeechToTextServer struct {
	grpc.ServerStream
}

func (x *speechToTextStreamingSpeechToTextServer) Send(m *StreamingSpeechToTextResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *speechToTextStreamingSpeechToTextServer) Recv() (*StreamingSpeechToTextRequest, error) {
	m := new(StreamingSpeechToTextRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SpeechToText_ServiceDesc is the grpc.ServiceDesc for SpeechToText service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeechToText_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "speechtotext.SpeechToText",
	HandlerType: (*SpeechToTextServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingSpeechToText",
			Handler:       _SpeechToText_StreamingSpeechToText_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stt.proto",
}
